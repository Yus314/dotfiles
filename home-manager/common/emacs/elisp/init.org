#+TITLE: Configurations for GNU Emacs
#+AUTHOR: minera
* Header
#+begin_src emacs-lisp :tangle yes
  ;; init.el --- My init.el -*- lexical-binding: t -*-
  ;; Configurations for Emacs
#+end_src
* leaf.el
#+begin_src emacs-lisp :tangle yes
  ;;<leaf-install-code>
  (eval-and-compile
  (customize-set-variable
       'package-archives
  '(("melpa" . "https://melpa.org/packages/")
  ("gnu" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless (package-installed-p 'leaf)
  (package-refresh-contents)
  (package-install 'leaf))
  (leaf leaf-keywords
    	:ensure t 
    	:init
  	(leaf el-get :ensure t)
  	
    	:config 
    	(leaf-keywords-init)))

  (leaf leaf-tree :ensure t)

  (leaf leaf-convert :ensure t)

#+end_src		            
* builtin properties
#+begin_src emacs-lisp :tangle yes
(leaf cus-start
  :tag "builtin" "internal"
  :custom ((user-full-name . "Yusuke Kakinuma")
(default-directory . "~/")))

#+end_src
#+begin_src emacs-lisp :tangle yes
  (leaf cus-edit
    :doc "tools for customizing Emacs and Lisp packages"
    :tag "builtin" "faces" "help"
    :custom `((custom-file . ,(locate-user-emacs-file "custom.el"))))

#+end_src
* UI
** theme
*** Modus Theme
見やすさにおいて、何らかの認定を受けたという言葉に弱く採用している。
少し、配色が落ち着きすぎている気もするが、これは元々 one dark  を使っていたこともあり、慣れの問題かもしれない。
emacs のテーマは色々なモードに対応していたりいなかったりするみたいで、新しく作られたということも安心感につながっている。
modus のテーマもある。
  #+begin_src emacs-lisp :tangle yes
    (leaf modus-themes
      :ensure t
      :custom(
    	  (modus-themes-italic-constructs . t)
    	  (modus-themes-bold-constructs . t)
    	  (modus-themes-mode-line . '(moody borderless))
    	  (modus-themes-prompts .
    				'(italic bold))
    	  (custom-safe-themes . t)
    	  )
      ;; antehutaonsuh
      :config
       ;(modus-themes-load-theme)
      (load-theme 'modus-operandi)
      )
#+end_src
** tree-sitter
世界を色付けてくれる。これがないと完全に真っ黒だったので必須。
Tree-sitter はモードに依存していて、設定がわかりにくい。
有効化、無効化をコマンドで行ないたいのだが、よくわかっていない。
tree-sitter と treesit の役割の違いも理解していない。
emacs lisp はデフォでやってくれているっぽい。
#+begin_src emacs-lisp :tangle yes
  (leaf treesit
    :custom(
  	  (treesit-font-lock-level . 4)
  	  (major-mode-remap-alist .
  				  '(
  				   (nix-mode . nix-ts-mode)
  				    ;  (emacs-lisp-mode . emacs-lisp-ts-mode)
  				      (yaml-mode . yaml-ts-mode)
  				      )
  )				  
  )				       
        )
  (leaf tree-sitter
    :ensure t
    :config
    (global-tree-sitter-mode)
  )

  #+end_src
*** nix
#+begin_src emacs-lisp :tangle yes
  (leaf nix-mode
    :ensure t
    :mode
    (("\\.nix\\'"))
    )
  (add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))
  (leaf nix-ts-mode
    :ensure t
    :mode
    (("\\.nix\\'" . nix-ts-mode))
    )
  (add-hook 'nix-ts-mode-hook 'eglot-ensure)
#+end_src
*** yaml
#+begin_src emacs-lisp :tangle yes
  (leaf yaml-mode
    :ensure t
    )
  (add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-mode))
  (leaf yaml-ts-mode
    :mode
    ("\\.ya?ml\\'")
    )
  (add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-ts-mode))
  (add-to-list 'major-mode-remap-alist '(yaml-mode . yaml-ts-mode))
#+end_src
*** rust
#+begin_src emacs-lisp :tangle yes
  (leaf rust-mode
     :ensure t
     :custom
     (rust-mode-treesitter-derive . t))
  (add-hook 'rust-mode 'elgot-ensure)
  (defun my/find-rust-project-root (dir)                                                                           
     (when-let ((root (locate-dominating-file dir "Cargo.toml")))                                                         
       (list 'vc 'Git root)))

  (defun my/rust-mode-hook ()
    (setq-local project-find-functions (list #'my/find-rust-project-root)))

  (add-hook 'rust-mode-hook #'my/rust-mode-hook)
#+end_src
** perfect-mergin
#+begin_src emacs-lisp :tangle yes
    (leaf perfect-margin
      :ensure t
      :custom
      (perfect-margin-ignore-filters . nil)
      :config
  ;(perfect-margin-mode)
      )
#+end_src
** icon
*** nerd-icons
#+begin_src emacs-lisp :tangle yes
  (leaf nerd-icons
    :ensure t
    )
   ;(add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)
  (leaf nerd-icons-corfu
    :ensure t
    :after nerd-icons
    :config
    )
#+end_src
** winnum
#+begin_src emacs-lisp :tangle yes
  (leaf winum
    :ensure t)
  (leaf ace-window
     :ensure t
    :after avy)
#+end_src
** tab bar
バッファをウインドウの管理をうまくできていないので、あまりつかいこなせていない。
 #+begin_src emacs-lisp :tangle yes
   ;(tab-bar-mode)
   (leaf centaur-tabs
     :ensure t
     :custom(
   	  (centaur-tabs-set-icons . t)
   	  (centaur-tabs-icon-type . 'nerd-icons)
   	  (centaur-tabs-set-bar . 'under)
   	  (x-underline-at-descent-line . t)
   	  (centaur-tabs-mode . t)
     )
    )
    
 #+end_src
** Moody
#+begin_src emacs-lisp :tangle yes
  (leaf moody
    :ensure t
    :custom
    (x-underline-at-descent-line . t)
    (moody-mode-line-height . 26)
    :config
     (moody-replace-mode-line-front-space)
     (moody-replace-mode-line-buffer-identification)
     (moody-replace-vc-mode)
    )
#+end_src
* 入力支援
** meow
#+begin_src emacs-lisp :tangle yes
  (leaf meow
    :ensure t
    :require meow
    :custom
    (meow-use-clipboard . t)
    (meow-expand-hint-counts . nil)
    :hook
    ((meow-insert-exit-hook . (lambda nil
                                (if skk-mode (skk-latin-mode-on))))
     )
    :config
    (defun meow-setup ()
      (setq meow-cheatsheet-layout meow-cheatsheet-layout-dvp)
      (meow-leader-define-key
       '("?" . meow-cheatsheet))
      (meow-motion-overwrite-define-key
       ;; custom keybinding for motion state
       '("<escape>" . ignore))
      (meow-normal-define-key
       '("?" . meow-cheatsheet)
       ;; Ctrl key


                                          ;'("*" . meow-expand-0)
       ;; puni
       '(", a (" . puni-wrap-round)
       '(", a [" . puni-wrap-square)
       '(", a {" . puni-wrap-curly)
       '(", a <" . puni-wrap-angle)
       '(", a d" . puni-splice)
       '(", s l" . puni-slurp-forward)
       '(", b a" . puni-barf-forward)

       '("=" . meow-expand-9)
       '("!" . meow-expand-8)
       '("[" . meow-expand-7)
       '("]" . meow-expand-6)
       '("{" . meow-expand-5)
       '("+" . meow-expand-4)
       '("}" . meow-expand-3)
       '(")" . meow-expand-2)
       '("(" . meow-expand-1)
       '("1" . digit-argument)
       '("2" . digit-argument)
       '("3" . digit-argument)
       '("4" . digit-argument)
       '("5" . digit-argument)
       '("6" . digit-argument)
       '("7" . digit-argument)
       '("8" . digit-argument)
       '("9" . digit-argument)
       '("0" . digit-argument)
       '("-" . negativargument)
       '(";" . meow-reverse)
       '("*" . meow-inner-of-thing)
       '("." . meow-bounds-of-thing)
       '("<" . meow-beginning-of-thing)
       '(">" . meow-end-of-thing)
       '("a" . meow-append)
       '("A" . meow-open-below)
       '("b" . meow-back-word)
       '("B" . meow-back-symbol)
       '("c" . meow-change)
       '("p" . meow-delete)
       '("P" . meow-backward-delete)
       '("e" . meow-line)
       '("E" . meow-goto-line)
       '("f" . meow-find)
       '("<escape>" . meow-cancel-selection)
       '("G" . meow-grab)
       '("d" . meow-left)
       '("D" . meow-left-expand)
       '("i" . meow-insert)
       '("I" . meow-open-above)
       '("j" . meow-join)
       '("k" . meow-kill)
       '("l" . meow-till)
       '("m" . meow-mark-word)
       '("M" . meow-mark-symbol)
       '("h" . meow-next)
       '("H" . meow-next-expand)
       '("o" . meow-block)
       '("O" . meow-to-block)
       '("t" . meow-prev)
       '("T" . meow-prev-expand)
       '("q" . meow-quit)
       '("r" . meow-replace)
       '("R" . meow-swap-grab)
       '("s" . meow-search)
       '("n" . meow-right)
       '("N" . meow-right-expand)
       '("u" . meow-undo)
       '("U" . meow-undo-in-selection)
       ;'("v" . meow-visit)

       '("v i" . meow-inner-of-thing) ;; Inner
       '("v a" . meow-bounds-of-thing) ;; Arround
       '("v b" . meow-block) ;; Block
       '("v c" . puni-mark-list-around-point) ;; Contents
       '("v x" . puni-mark-sexp-around-point) ;; eXpression
       '("v l" . meow-line) ;; Line
       '("v s" . meow-mark-symbol) ;; Symbol
       '("v w" . meow-mark-word) ;; Word
       '("v v" . puni-expand-region) ;; Expand
       '("v r" . rectangle-mark-mode) ;; Rectangle

       '("w" . meow-next-word)
       '("W" . meow-next-symbol)
       '("x" . meow-save)
       '("X" . meow-sync-grab)
       '("y" . meow-yank)
       '("z" . meow-pop-selection)
       '("'" . repeat)
       '("g" . avy-goto-char-timer)
       )
      )
    (meow-setup)
    (meow-global-mode)
    )

#+end_src
** puni
 #+begin_src emacs-lisp :tangle yes
   (leaf puni
       :ensure t)

   
 #+end_src

** ddskk
何はともあれSKKでの日本語入力が必要。
キーボード配列に合うようにマップし直している.
#+begin_src emacs-lisp :tangle yes
    (leaf ddskk
       :ensure t
        :bind
        ("C-x C-j" . skk-mode)
        :custom
        (skk-use-act . t)
        (skk-isearch-skk-mode-enable . t)
        (skk-use-search-web . t)
        (skk-egg-like-newline . t) ; Enterで改行しない
        (skk-show-inline . 'vertical)
        (skk-auto-insert-paren . t) ; 括弧の自動入力
        (skk-delete-implies-kakutei . nil) ;nil にすると▼モードで <BS> を押した時 に一つ前の候補を表示するようになる
        (skk-henkan-strict-okuri-precedence . t); 正しい送り仮名の変換が優先的に表示されるようにする設定
        (skk-show-annotation . t) ; 単語の意味をアノテーションとして表示する設定
        ;; 動的補完
        (skk-dcomp-activate . t)
       (skk-dcomp-multiple-activate . t)
        (skk-kutouten-type . '("．" . "，"))
        ;; 言語
        (skk-japanese-mesage-and-erreor . t) ; エラーを日本語に
        (skk-show-japanese-menu . t) ; メニューを日本語に
        (skk-read-from-minibuffer-function .
          (lambda ()
            (car (skk-google-suggest skk-henkan-key))))
        (skk-rom-kana-rule-list
         . '(("'" nil ("アン" . "あん"))
           ("c'" nil ("カン" . "かん"))
           ("s'" nil ("サン" . "さん"))
           ("t'" nil ("タン" . "たん"))
           ("n'" nil ("ナン" . "なん"))
           ("h'" nil ("ハン" . "はん"))
           ("m'" nil ("マン" . "まん"))
           ("yz" nil ("ヤン" . "やん"))
           ("r'" nil ("ラン" . "らん"))
           ("w'" nil ("ワン" . "わん"))

           ("g'" nil ("ガン" . "がん"))
           ("z'" nil ("ザン" . "ざん"))
           ("d'" nil ("ダン" . "だん"))
           ("b'" nil ("バン" . "ばん"))
           ("pz" nil ("パン" . "ぱん"))

           (";" nil ("ッ" . "っ"))
           ("c;" nil ("カイ" . "かい"))
           ("s;" nil ("サイ" . "さい"))
           ("t;" nil ("タイ" . "たい"))
           ("n;" nil ("ナイ" . "ない"))
           ("h;" nil ("ハイ" . "はい"))
           ("m;" nil ("マイ" . "まい"))
           ("yl" nil ("ヤイ" . "やい"))
           ("r;" nil ("ライ" . "らい"))
           ("w;" nil ("ワイ" . "わい"))

           ("g;" nil ("ガイ" . "がい"))
           ("z;" nil ("ザイ" . "ざい"))
           ("d;" nil ("ダイ" . "だい"))
           ("b;" nil ("バイ" . "ばい"))
           ("pl" nil ("パイ" . "ぱい"))

           ("ys" nil ("ヤ" . "や"))
           ("yd" nil ("イ" . "い"))
           ("yh" nil ("ユ" . "ゆ"))
           ("yt" nil ("イェ" . "いぇ"))
           ("yn" nil ("ヨ" . "よ"))
           ("yl" nil ("ヤイ" . "やい"))
           ("yr" nil ("ヨウ" . "よう"))
           ("yc" nil ("イウ" . "いう"))
           ("yg" nil ("ユウ" . "ゆう"))
           ("yf" nil ("ユイ" . "ゆい"))
           ("yz" nil ("ヤン" . "やん"))
           ("yb" nil ("イン" . "いん"))
           ("ym" nil ("ユン" . "ゆん"))
           ("yw" nil ("エン" . "えん"))
           ("yv" nil ("ヨン" . "よん"))


           ("pna" nil ("" . "")) ;
           ("pni" nil ("" . "")) ;
           ("pnu" nil ("" . "")) ;
           ("pne" nil ("" . "")) ;
           ("pno" nil ("" . "")) ;
           ("pns" nil ("" . "")) ;

           ("pn;" nil ("" . "")) ;
           ("pn," nil ("" . "")) ;
           ("pn." nil ("" . "")) ;
           ("pnp" nil ("" . "")) ;
           ("pny" nil ("" . "")) ;

           ("pn'" nil ("" . "")) ;
           ("pnq" nil ("" . "")) ;
           ("pnj" nil ("" . "")) ;
           ("pnk" nil ("" . "")) ;
           ("pn<" nil ("" . "")) ;
           ("pn>" nil ("" . "" ));

           ("pn" nil ("ポ" . "ぽ")) ; pn~ にマップされていて、有効化されない。
           ("pl" nil ("パイ" . "ぱい"))
           ("pr" nil ("ポウ" . "ぽう"))
           ("pc" nil ("ペイ" . "ぺい"))
           ("pg" nil ("プウ" . "ぷう"))
           ("pf" nil ("プイ" . "ぷい"))
           ("pz" nil ("パン" . "ぱん"))
           ("pb" nil ("ピン" . "ぴん"))
           ("pm" nil ("プン" . "ぷん"))
           ("pw" nil ("ペン" . "ぺん"))
           ("pv" nil ("ポン" . "ぽん"))
           )
         )

         )

    (leaf ddskk-posframe

      :ensure t
      :after posframe ddskk
      :custom
      (ddskk-posframe-mode . t)
      )
  ;; ファイルを開くと同時にSKKを有効化する
    (defun my/always-enable-skk-latin-mode-hook ()
      (skk-latin-mode 1))

    (add-hook 'find-file-hooks 'my/always-enable-skk-latin-mode-hook)
#+end_src
** which key
#+begin_src emacs-lisp :tangle yes
(leaf which-key
    :config
    (which-key-mode)
    )

#+end_src
* ミニバッファ補完
** vercico
#+begin_src emacs-lisp :tangle yes
(fido-vertical-mode +1)
#+end_src
** marginalia
#+begin_src emacs-lisp :tangle yes
  (leaf marginalia
      :ensure t
      :config
      (marginalia-mode))
  
#+end_src
** orderless
#+begin_src emacs-lisp :tangle yes
  (leaf orderless
    :ensure t
    :custom(
  	  (completion-styles . '(orderless basic))
  	  (completion-category-overrides . '((file
					     (styles basic partial-completion)))))
    )
#+end_src
** consult
    #+begin_src emacs-lisp :tangle yes
      (leaf consult
            :ensure t
            :bind
            ("M-g f" . consult-fd)
         )
#+end_src
* 入力補完
** corfu
#+begin_src emacs-lisp :tangle yes
  (leaf corfu
    :ensure t
    :custom(
            (corfu-auto . t)
            (corfu-auto-delay . 0)
            (corfu-popupinfo-delay . 0)
            (corfu-quit-no-match . 'separator)
            (corfu-auto-prefix . 1)
            (corfu-cycle . t)
            (text-mode-ispell-word-completion . nil)
            (tab-awlays-indent . 'complete)
            )
    :init
    (global-corfu-mode)
    :config
    (corfu-popupinfo-mode)
    (keymap-unset corfu-map "RET")
    (keymap-unset corfu-map "<up>")
    (keymap-unset corfu-map "<remap> <next-line>")
    (keymap-unset corfu-map "<remap> <previous-line>")
    (keymap-unset corfu-map "<down>")
    (keymap-set corfu-map "C-n" 'corfu-next)
    (keymap-set corfu-map "C-p" 'corfu-previous)
    )
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)
#+end_src
** cape
#+begin_src emacs-lisp :tangle yes
  (leaf cape
    :ensure t
    :init
    (add-to-list 'completion-at-point-functions #'cape-file); ディレクトリやファイルなどを補完
    (add-to-list 'completion-at-point-functions #'cape-keyword); falseみたいなキーワードをmodeごとに補完
    (add-to-list 'completion-at-point-functions #'cape-dabbrev); 現在のバッファを見て，補完
    )

#+end_src
* org
** org
#+begin_src emacs-lisp :tangle yes
  (leaf org
    :ensure t
    :custom
    (org-todo-keywords
     . '((sequence "DIVIDING(v)" "TODO(t)" "WAIT(w)" "SOMEDAY(s)" "|" "DONE(d)" "CANCEL(c)")))
    (org-todo-keyword-faces
     . '(("DIVIDING" . org-warning)
         ("TODO" . org-warning)
         ("WAIT" . org-warning)
         ("SOMEDAY(s)" . (:foreground "lime green" :weight normal))
         ("DONE(d)" . "yellow")
         ("CANCEL" . org-warning)
         ))
    (org-startup-folded . t)
    (org-tag-alist
     . '(("HOME" . ?h)
         ("LAB" . ?l)
         ("Search" . ?s)
         ("Computer" . ?p)
         ("Kana" . ?k)
         ))
    )
#+end_src
** org-super-agenda
#+begin_src emacs-lisp :tangle yes
  (leaf org-super-agenda
    :ensure t
    :bind
    ("C-c a" . #'org-agenda)
    :custom
    (org-agenda-files . '("~/dropbox/daily" "~/dropbox/inbox/inbox.org"))
    (org-super-agenda-groups
     . '(
         (
          :name "Today"
          :scheduled today
          :deadline today
          )
         (
          :name "Week"
          :scheduled (today+1w)
          :deadline (today+1w)
          )
         (
          :name "Un Divided"
          :todo "DIVIDING"
          )
         )
     )
    :config
    (org-super-agenda-mode)
    )
#+end_src
** org-capture
#+begin_src emacs-lisp :tangle yes
  (leaf org-roam
    :ensure t
    :bind
    ("C-c n c" . #'org-roam-capture  )
    ("C-c c" . #'org-roam-dailies-capture-today)
    :custom
    (org-roam-directory .  "~/dropbox/")
    (org-roam-capture-templates
     .
     '(("f" "Fleeting(一時メモ)" plain "%?"
        :target (file+head "org/fleeting/%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
        :unnarrowed t)
       ("l" "Literature(文献)" plain "%?"
        :target (file+head "org/literature/%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
        :unnarrowed t)))
    (org-roam-dailies-capture-templates
     . '(
         ("m" "memo" entry "* MEMO <%<%Y-%m-%d %H:%M>> %^{title}\n  %?"
          :target (file+head "%<%Y-%m-%d>.org"
                             "#+title: %<%Y年%m月%d日(%a)>")
          :prepend nil
          :kill-buffer t
          )
         ("t" "ToDo" entry "* DIVIDING <%<%Y-%m-%d %H:%M>> %^{title}\n  %?"
          :target (file+head "%<%Y-%m-%d>.org"
                             "#+title: %<%Y年%m月%d日(%a)>")
          :prepend nil
          :kill-buffer t
          )
         )
     )
    )
#+end_src
** org-journal
#+begin_src emacs-lisp :tangle yes
  (leaf org-journal
    :ensure t
    :custom
    (org-journal-dir . "~/dropbox/journal")
    (org-journal-date-format . "%Y-%m-%d")
    (org-journal-file-format . "%Y%m%d.org")
    )
#+end_src
** org-indent
#+begin_src emacs-lisp :tangle yes
  (leaf org-indent
    :hook org-mode-hook(org-indent-mode)
    )
#+end_src
** org-modern
#+begin_src emacs-lisp :tangle yes
  (leaf org-modern
    :ensure t
    :custom
    (
     (org-insert-heading-respect-content . t)
     (org-modern-star . "◉○●◈◇◆✸✳")
     (org-modern-todo-faces
      .  (quote (("SOMEDAY" :background "pink" :foreground "white" :weight bold)
                 ("DIVIDING" :background "blue" :foreground "white" :weight bold)))
      )
     )
    :config
    (global-org-modern-mode)
    )

#+end_src

** org-nodern-indent
#+begin_src emacs-lisp :tangle yes
  (leaf org-modern-indent
      :el-get jdtsmith/org-modern-indent
      :require t
      :config (add-hook 'org-mode-hook #'org-modern-indent-mode 90)
      )
#+end_src

** org-babel
#+begin_src emacs-lisp :tangle yes
  (org-babel-do-load-languages 'org-babel-load-languages
  			     '((emacs-lisp . t)
  			       (org . t)))
#+end_src

* Git
** diff-hl
#+begin_src emacs-lisp :tangle yes
  (leaf diff-hl
    :ensure t
    :custom
     (global-diff-hl-mode . t)
     (diff-hl-flydiff-mode . t)
     )
#+end_src
** magit
#+begin_src emacs-lisp :tangle yes
  (leaf magit
    :ensure t
    :bind
    ("C-x g" . magit-status)
    )
#+end_src
* flycheck
#+begin_src emacs-lisp :tangle yes
  (leaf flycheck
    :ensure t
    :config
    (flycheck-define-checker textlint
    "textlint."
    :command ("textlint" "--format" "unix"
              source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
              (id (one-or-more (not (any " "))))
              (message (one-or-more not-newline)
                       (zero-or-more "\n" (any " ") (one-or-more not-newline)))
              line-end))
    :modes (text-mode markdown-mode gfm-mode LaTeX-mode japanese-latex-mode))
  (add-to-list 'flycheck-checkers 'textlint)

    )
  (add-hook 'after-init-hook #'global-flycheck-mode)
  (leaf flycheck-posframe
      :ensure t
      :after flycheck posframe
      :config(flycheck-posframe-mode)
      )
#+end_src
* PDF
#+begin_src emacs-lisp :tangle yes
  (leaf pdf-tools

    ensure t
    :init
   (pdf-tools-install)
    )
  (add-hook 'pdf-view-mode-hook (lambda() (nlinum-mode -1)))
  #+end_src
* MisTTY
#+begin_src emacs-lisp :tangle yes
  (leaf mistty
     :ensure t)
#+end_src
* helpful
#+begin_src emacs-lisp :tangle yes
  (leaf helpful
      :ensure t
      )
#+end_src
* Avy
#+begin_src emacs-lisp :tangle yes
  (leaf avy
    :ensure t
    :bind ("M-'" . avy-goto-char-timer)
    )
  (defun avy-action-helpful (pt)
    (save-excursion
      (goto-char pt)
      (helpful-at-point))
    (select-window
     (cdr (ring-ref avy-ring 0)))
    t)
  ;(setf (alist-get ?H avy-dispatch-alist) 'avy-action-helpful)
  (defun avy-action-embark (pt)
    (unwind-protect
        (save-excursion
  	(goto-char pt)
  	(embark-act))
    (select-window
     (cdr (ring-ref avy-ring 0))))
    t)
  ;(setf (alist-get ?. avy-dispatch-alist) 'avy-action-embark)
    
#+end_src
* ace-window
#+begin_src emacs-lisp :tangle yes
  (leaf ace-window
    :ensure t
    )
#+end_src
* embark
#+begin_src emacs-lisp :tangle yes
  (leaf embark
    :ensure t
    :bind(
  	("C-." . embark-act)
  	("C-;" . embark-dwim)
  	("C-h B" . embark-bindings))
    :custom
    (prefix-help-command #'embark-prefix-help-command)
    )
  (leaf embark-consult
    :ensure t
    :after consult 
    )
#+end_src
* go-translate
#+begin_src emacs-lisp :tangle yes
  ;(leaf go-translate
  ;  :ensure t
  ;      :config
  ;  (setq gt-langs '(en ja))
  ;  (setq gt-default-translator
  ;	(gt-translator
  ;	 :taker (gt-taker :text 'buffer :pick 'paragraph)
  ;	 :engines (list (gt-deepl-engine :key "XXXXXXXXX"))
  ;	 :Render (gt-buffer-render :then (gt-kill-ring-render))
  ;	 ))
  ;  :bind (
  ;	 ("C-; t" . gt-do-translate)
  ;	 )
  ;  )
#+end_src
* reinbow-delimiters
#+begin_src emacs-lisp :tangle yes
  (leaf rainbow-delimiters
    :ensure t
    :hook emacs-lisp-mode-hook (rainbow-delimiters-mode)
    )
#+end_src
* reformatter
#+begin_src emacs-lisp :tangle yes
  (leaf reformatter
    :ensure t
    )
  (reformatter-define nixfmt
    :program "nixfmt"
    :args '("-")
    )
#+end_src
* aggressive-indent
#+begin_src emacs-lisp :tangle yes
  (leaf aggressive-indent
    :ensure t
    :hook emacs-lisp-mode-hook (aggressive-indent-mode)
    )
#+end_src
* プログラミング支援
** eglot
#+begin_src emacs-lisp :tangle yes
  (leaf eglot
  ((add-to-list 'eglot-server-programs
  	      '((nix-ts-mode  . "nil")
  		(rust-mode) . "rust-anlyzer")
  	      )
   )
  )

#+end_src

** Tex
#+begin_src emacs-lisp :tangle yes
    (leaf auctex
      :ensure t
      :custom
      (
     (TeX-default-mode . 'japanese-latex-mode)
     (TeX-auto-save . t)
     (TeX-parse-self . t)
     (TeX-master . nil)
     )
      
     ;(TeX-view-program-selection . '((output-pdf "PDF Tools")))
     (TeX-view-program-selection . '((output-pdf "Zathura")))
     (japanese-TeX-engine-default . 'platex)
     ;(TeX-view-program-list . '(("PDF Tools" TeX-pdf-tools-sync-view)))
     ;; 保存時に自動コンパイル
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)

  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (add-hook 'after-save-hook 'TeX-command-run-all nil t)))
    
     ;(TeX-PDF-from-DVI . "Dvipdfmx")
      )
  ;  (add-hook 'LaTeX-mode-hook 'japanese-LaTeX-mode)
   ; (leaf auctex-latexmk
    ;   :ensure t
     ;  :after auctex
      ; :config
       ;(auctex-latexmk-setup)
    ;)
#+end_src

** direnv
#+begin_src emacs-lisp :tangle yes
  (leaf direnv
    :ensure t
    :config
    (direnv-mode)
    )
#+end_src
