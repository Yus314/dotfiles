#+TITLE: Configurations for GNU Emacs
#+AUTHOR: minera
* Header
#+begin_src emacs-lisp :tangle yes
  ;; init.el --- My init.el -*- lexical-binding: t -*-
  ;; Configurations for Emacs
#+end_src
* leaf.el
#+begin_src emacs-lisp :tangle yes
  ;;<leaf-install-code>
  (eval-and-compile
  (customize-set-variable
       'package-archives
  '(("melpa" . "https://melpa.org/packages/")
  ("gnu" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless (package-installed-p 'leaf)
  (package-refresh-contents)
  (package-install 'leaf))
  (leaf leaf-keywords
    	:ensure t 
    	:init
  	(leaf el-get :ensure t)
  	
    	:config 
    	(leaf-keywords-init)))

  (leaf leaf-tree :ensure t)

  (leaf leaf-convert :ensure t)

#+end_src		            
* builtin properties
#+begin_src emacs-lisp :tangle yes
(leaf cus-start
  :tag "builtin" "internal"
  :custom ((user-full-name . "Yusuke Kakinuma")
(default-directory . "~/")))

#+end_src
#+begin_src emacs-lisp :tangle yes
  (leaf cus-edit
    :doc "tools for customizing Emacs and Lisp packages"
    :tag "builtin" "faces" "help"
    :custom `((custom-file . ,(locate-user-emacs-file "custom.el"))))

#+end_src
* 一般設定
#+begin_src emacs-lisp :tangle yes
  (leaf smooth-scroll
    :ensure t
    :require t
    :config
    (smooth-scroll-mode)
    )
  (setq scroll-conservatively 35)
  (setq scroll-step 1)
  (setq scroll-margin 5)
  (setq scroll-preserve-screen-position t)

  (setq blink-cursor-idle-time 1)  ;; 入力停止から点滅開始までの秒数
  (setq blink-cursor-interval 0.3)  ;; 点滅の間隔（秒）
  (setq blink-cursor-blinks 0)      ;; 0は無限に点滅を続けることを意味する
  (blink-cursor-mode 1)             ;; カーソル点滅モードを有効化
#+end_src
** Clip board
Waylandでペーストできるようにする設定
#+begin_src emacs-lisp :tangle yes
  (when (equal system-type 'gnu/linux)
  (setq wl-copy-process nil)
    (defun wl-copy (text)
      (setq wl-copy-process (make-process :name "wl-copy"
                                          :buffer nil
                                          :command '("wl-copy" "-f" "-n")
                                          :connection-type 'pipe
                                          :noquery t))
      (process-send-string wl-copy-process text)
      (process-send-eof wl-copy-process))
  (defun wl-paste ()
    (if (and wl-copy-process (process-live-p wl-copy-process))
        nil
      (shell-command-to-string "wl-paste -n")))
  (setq interprogram-cut-function 'wl-copy)
  (setq interprogram-paste-function 'wl-paste)
  )
#+end_src
** 起動時間測定
#+begin_src emacs-lisp :tangle yes
  (defconst my/before-load-init-time (current-time))

  ;;;###autoload
  (defun my/load-init-time ()
    "Loading time of user init files including time for `after-init-hook'."
    (let ((time1 (float-time
                  (time-subtract after-init-time my/before-load-init-time)))
          (time2 (float-time
                  (time-subtract (current-time) my/before-load-init-time))))
      (message (concat "Loading init files: %.0f [msec], "
                       "of which %.f [msec] for `after-init-hook'.")
               (* 1000 time1) (* 1000 (- time2 time1)))))
  (add-hook 'after-init-hook #'my/load-init-time t)

  (defvar my/tick-previous-time my/before-load-init-time)

  ;;;###autoload
  (defun my/tick-init-time (msg)
    "Tick boot sequence at loading MSG."
    (when my/loading-profile-p
      (let ((ctime (current-time)))
        (message "---- %5.2f[ms] %s"
                 (* 1000 (float-time
                          (time-subtract ctime my/tick-previous-time)))
                 msg)
        (setq my/tick-previous-time ctime))))

  (defun my/emacs-init-time ()
    "Emacs booting time in msec."
    (interactive)
    (message "Emacs booting time: %.0f [msec] = `emacs-init-time'."
             (* 1000
                (float-time (time-subtract
                             after-init-time
                             before-init-time)))))

  (add-hook 'after-init-hook #'my/emacs-init-time)
#+end_src
* UI
** theme
*** Modus Theme
見やすさにおいて、何らかの認定を受けたという言葉に弱く採用している。
少し、配色が落ち着きすぎている気もするが、これは元々 one dark  を使っていたこともあり、慣れの問題かもしれない。
emacs のテーマは色々なモードに対応していたりいなかったりするみたいで、新しく作られたということも安心感につながっている。
modus のテーマもある。
  #+begin_src emacs-lisp :tangle yes
    (leaf modus-themes
      :ensure t
      :custom(
    	  (modus-themes-italic-constructs . t)
    	  (modus-themes-bold-constructs . t)
    	  (modus-themes-mode-line . '(moody borderless))
    	  (modus-themes-prompts .
    				'(italic bold))
    	  (custom-safe-themes . t)
    	  )
      ;; antehutaonsuh
      :config
       ;(modus-themes-load-theme)
      (load-theme 'modus-operandi)
      )

#+end_src
** tree-sitter
世界を色付けてくれる。これがないと完全に真っ黒だったので必須。
Tree-sitter はモードに依存していて、設定がわかりにくい。
有効化、無効化をコマンドで行ないたいのだが、よくわかっていない。
tree-sitter と treesit の役割の違いも理解していない。
emacs lisp はデフォでやってくれているっぽい。
#+begin_src emacs-lisp :tangle yes
  (leaf treesit
    :custom(
            (treesit-font-lock-level . 4)
            (major-mode-remap-alist .
                                    '(
                                      (nix-mode . nix-ts-mode)
                                          ;  (emacs-lisp-mode . emacs-lisp-ts-mode)
                                      (yaml-mode . yaml-ts-mode)
                                      (python-mode . python-ts-mode)
                                      )
                                    )
            )				       
   )
  (leaf tree-sitter
    :ensure t
    :config
    (global-tree-sitter-mode)
    )

  #+end_src
** perfect-mergin
#+begin_src emacs-lisp :tangle yes
  (leaf perfect-margin
    :ensure t
    :custom
    (perfect-margin-ignore-filters . nil)
          (perfect-margin-ignore-regexps . nil)
  	  (perfect-margin-visible-width . 108)
  	  (split-width-threshold . 107)
    :config
    (perfect-margin-mode)
    )
#+end_src
** icon
*** nerd-icons
#+begin_src emacs-lisp :tangle yes
  (leaf nerd-icons
    :ensure t
    )
   ;(add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)
  (leaf nerd-icons-corfu
    :ensure t
    :after nerd-icons
    :config
    )
#+end_src
** winnum
#+begin_src emacs-lisp :tangle yes
  (leaf winum
    :ensure t)
#+end_src
** tab bar
バッファをウインドウの管理をうまくできていないので、あまりつかいこなせていない。
 #+begin_src emacs-lisp :tangle yes
   (leaf centaur-tabs
     :ensure t
     :custom
     (centaur-tabs-style . "alternate")
     (centaur-tabs-set-icons . t)
     (centaur-tabs-icon-type . 'nerd-icons)
     ;(centaur-tabs-set-bar . 'under)
     ;(x-underline-at-descent-line . t)
     (centaur-tabs-mode . t)
     :config
     (centaur-tabs-headline-match)
     (setq centaur-tabs-set-bar 'under)
     (setq x-underline-at-descent-line t)
     )
 #+end_src
** minus
#+begin_src emacs-lisp :tangle yes
  (leaf minions
    :ensure t
    :config
    (minions-mode 1)
    )
#+end_src
** Moody
#+begin_src emacs-lisp :tangle yes
                                          ;(leaf moody
                                          ;  :ensure t
                                          ;                                        ; :custom
                                          ;                                        ;  (x-underline-at-descent-line . t)
                                          ;                                        ;  (moody-mode-line-height . 26)
                                          ;  :config
                                          ;  (moody-replace-mode-line-front-space)
                                          ;  (moody-replace-mode-line-buffer-identification)
                                          ;  (moody-replace-vc-mode)
                                          ;  )
  (use-package moody
    :config
    (setq moody-mode-line-height 26)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode)
    )
#+end_src
** spacious-padding
#+begin_src emacs-lisp :tangle yes
  (leaf spacious-padding
    :ensure t
    :custom
    (spacious-padding-widths
     . '(
         :internal-border-width 5
         :right-divider-width 0
         :mode-line-width 0
         :left-fringe-width 5
         ))
    :config
    (spacious-padding-mode)
    )
 #+end_src
* 入力支援
** ryo-modal-mode
#+begin_src emacs-lisp :tangle yes
 ; (leaf ryo-modal
  ;  :ensure t
  ;    )
#+end_src
** evil-mode
#+begin_src emacs-lisp :tangle yes
 ; (leaf evil
 ;   :ensure t
 ;   )

#+end_src
** kakoune
#+begin_src emacs-lisp :tangle yes
 ; (leaf kakoune
 ;   :ensure t
 ;   :after ryo-modal multiple-cursors expand-region
 ;   :bind ("C-z" . ryo-modal-mode)
 ;   )
#+end_src
** mewo
#+begin_src emacs-lisp :tangle yes
  (leaf meow
    :ensure t
    :require meow
   :custom
    (meow-use-clipboard . t)
    (meow-expand-hint-counts . nil)
    :config
    (defun meow-setup ()
      (setq meow-cheatsheet-layout meow-cheatsheet-layout-dvp)
      (meow-leader-define-key
      '("?" . meow-cheatsheet))
      (meow-motion-overwrite-define-key
       ;; custom keybinding for motion state
       '("<escape>" . ignore))
      (meow-normal-define-key
       '("?" . meow-cheatsheet)
       ;; Ctrl key;


                                          ;'("*" . meow-expand-0)
       ;; puni
       '(", a (" . puni-wrap-round)
       '(", a [" . puni-wrap-square)
       '(", a {" . puni-wrap-curly)
       '(", a <" . puni-wrap-angle)
       '(", a d" . puni-splice)
       '(", s l" . puni-slurp-forward)
       '(", b a" . puni-barf-forward)

       '("=" . meow-expand-9)
       '("!" . meow-expand-8)
       '("[" . meow-expand-7)
       '("]" . meow-expand-6)
       '("{" . meow-expand-5)
       '("+" . meow-expand-4)
       '("}" . meow-expand-3)
       '(")" . meow-expand-2)
       '("(" . meow-expand-1)
       '("1" . digit-argument)
       '("2" . digit-argument)
       '("3" . digit-argument)
       '("4" . digit-argument)
       '("5" . digit-argument)
       '("6" . digit-argument)
       '("7" . digit-argument)
       '("8" . digit-argument)
       '("9" . digit-argument)
       '("0" . digit-argument)
       '("-" . negativargument)
       '(";" . meow-reverse)
       '("*" . meow-inner-of-thing)
       '("." . meow-bounds-of-thing)
       '("<" . meow-beginning-of-thing)
       '(">" . meow-end-of-thing)
       '("a" . meow-append)
  					;'("A" . meow-open-below)
       '("A" . meow-block)
       '("b" . consult-buffer) ;元はmeow-back-word     
       '("B" . meow-back-symbol)
       '("c" . meow-change)
       '("C" . mc/mark-next-like-this)
       '("p" . meow-delete)
       '("P" . meow-backward-delete)
       '("e" . meow-line)
       '("E" . meow-goto-line)
       '("f" . meow-find)
       '("<escape>" . meow-cancel-selection)
       '("G" . meow-grab)
       '("d" . meow-left)
       '("D" . meow-left-expand)
       '("i" . meow-insert)
       '("I" . meow-to-block)
       '("j" . meow-join)
       '("k" . meow-kill)
       '("l" . meow-till)
       '("m" . meow-forward-bracket)
       '("M" . meow-mark-symbol)
       '("s" . meow-next)
       '("S" . meow-next-expand)
       '("o" . meow-open-below)
       '("O" . meow-open-above)
       '("t" . meow-prev)
       '("T" . meow-prev-expand)
       '("q" . meow-quit)
       '("r" . meow-replace)
       '("R" . meow-swap-grab)
       '("h" . meow-search)
       '("n" . meow-right)
       '("N" . meow-right-expand)
       '("u" . vundo)
       '("U" . meow-undo-in-selection)
                                         ;'("v" . meow-visit)
       '("v i" . meow-inner-of-thing) ;; Inner
     '("v a" . meow-bounds-of-thing) ;; Arround
      '("v b" . meow-block) ;; Block
      '("v c" . puni-mark-list-around-point) ;; Contents
       '("v x" . puni-mark-sexp-around-point) ;; eXpression
       '("v l" . meow-line) ;; Line
       '("v s" . meow-mark-symbol) ;; Symbol
       '("v w" . meow-mark-word) ;; Word
       '("v v" . puni-expand-region) ;; Expand
       '("v r" . rectangle-mark-mode) ;; Rectangle
       '("w" . meow-next-word)
       '("W" . meow-next-symbol)
       '("x" . meow-save)
       '("X" . meow-sync-grab)
       '("y" . meow-yank)
       '("z" . meow-pop-selection)
       '("'" . repeat)
      ;'("g" . avy-goto-char-timer)
       )
      )
    (meow-setup)
    (meow-global-mode)
    )
#+end_src
** puni
 #+begin_src emacs-lisp :tangle yes
   (keymap-global-unset "C-j")
   (leaf puni
       :ensure t
       :bind
       ("C-j i" . puni-mark-list-around-point)
       ("C-j a" . puni-mark-sexp-around-point)
       ("C-j e" . puni-expand-region)
       )
 #+end_src

** which key
#+begin_src emacs-lisp :tangle yes
(leaf which-key
    :config
    (which-key-mode)
    )

#+end_src
** vundo
#+begin_src emacs-lisp :tangle yes
  (leaf vundo
    :ensure t
    :bind
    ("C-r" . vundo)
    (:vundo-mode-map
     ("d" . vundo-backward)
     ("n" . vundo-forward)
     ("s" . vundo-next)
     ("t" . vundo-previous)
     ("b" . vundo-diff)
     )
    )
#+end_src
** dmacro
#+begin_src emacs-lisp :tangle yes
  (leaf dmacro
    :ensure t
    )
    ;:custom `((dmacro-key . ,(kbd "C-b")))  ;; C-b を dmacro のキーにする
    ;:global-minor-mode global-dmacro-mode)
  (defun my-indent-rigidly-right-to-tab-stop (beg end)
    "Indent all lines between BEG and END rightward to a tab stop and keep the region active."
    (interactive "r")
    (let ((deactivate-mark nil))  ; 選択範囲を解除しない
      (indent-rigidly-right-to-tab-stop beg end)))

  (global-set-key (kbd "C->") 'my-indent-rigidly-right-to-tab-stop)
  (defun select-to-end-of-buffer ()
    "Select from the current point to the end of the buffer."
    (interactive)
    (set-mark (point)) ;; 現在のポイントをマークに設定
    (goto-char (point-max))) ;; バッファ末尾に移動
  (global-set-key (kbd "M->") 'select-to-end-of-buffer)
#+end_src
** shift-selection-mode
#+begin_src emacs-lisp :tangle yes
  ; (defun handle-shift-selection ()
  ;   "Activate/deactivate mark depending on invocation thru shift translation.
  ; This function behaves opposite to the original: it activates the
  ; mark when Shift is NOT pressed, and deactivates it when Shift is
  ; pressed."
  ;   (cond ((and (eq shift-select-mode 'permanent)
  ;               (not this-command-keys-shift-translated))
  ;          (unless mark-active
  ;            (push-mark nil nil t)))
  ;         ((and shift-select-mode
  ;               (not this-command-keys-shift-translated))
  ;          (unless (and mark-active
  ; 		      (eq (car-safe transient-mark-mode) 'only))
  ; 	   (setq-local transient-mark-mode
  ;                        (cons 'only
  ;                              (unless (eq transient-mark-mode 'lambda)
  ;                                transient-mark-mode))) 
  ;            (push-mark nil nil t)))
  ;         ((eq (car-safe transient-mark-mode) 'only)
  ;          (setq transient-mark-mode (cdr transient-mark-mode))
  ;          (if (eq transient-mark-mode (default-value 'transient-mark-mode))
  ;              (kill-local-variable 'transient-mark-mode))
  ;          (deactivate-mark))))
  ; (defun open-below()
  ;   "Open a newline and move cursor"
  ;   (interactive)
  ;   (goto-char (line-end-position))
  ;   (newline-and-indent)
  ;   )
  ; (defun select-current-line ()
  ; "Select the current line."
  ; (interactive)
  ; (let ((start (line-beginning-position))
  ;       (end (line-end-position)))
  ;   (set-mark start)
  ;   (goto-char (min (point-max) (+ 1 end)))))
  ; (defun quit-and-back ()
  ;   "Quit current buffer and back prev buffer"
  ;   (interactive)
  ;   (if (> (seq-length (window-list (selected-frame)))1)
  ;       (previous-buffer
  ;        ))
  ;   )
  ; (defun quit-and-back ()
  ;   "Quit current buffer and go back to previous buffer."
  ;   (interactive)
  ;   (if (> (length (window-list)) 1)
  ;       (progn
  ;         (bury-buffer)
  ;         (previous-buffer))
  ;     (kill-buffer (current-buffer))))
  ; (defun consult-line-literal ()
  ; (interactive)
  ; (let ((completion-styles '(orderless))
  ;       (orderless-matching-styles '(orderless-literal))
  ;       (completion-category-defaults nil)
  ;       (completion-category-overrides nil))
  ;   (consult-line)))
  ; (set-frame-parameter (window-frame) 'cursor-type 'bar)
  ; (define-key input-decode-map (kbd "C-i") [contorol-i])
  ; (keymap-global-set "C-d" 'backward-char)
  ; (keymap-global-set "C-f" 'consult-line-literal)
  ; (global-set-key [contorol-i]  'avy-goto-char-timer)
  ; (keymap-global-set "C-k" 'select-current-line)
  ; (keymap-global-set "C-n" 'forward-char)
  ; (keymap-global-set "C-o" 'open-below)
  ; (keymap-global-set "C-t" 'previous-line)
  ; (keymap-global-set "C-s" 'next-line);;;

#+end_src
** multiple-cursors
#+begin_src emacs-lisp :tangle yes
  (leaf multiple-cursors
    :ensure t)
#+end_src
* タイマーを利用した疑似非同期
#+begin_src  emacs-lisp :tangle yes
  (defvar my-delayed-configurations nil)

  ;; 0.1 秒ずつ間隔を開けながら消化
  (defvar my-delayed-configuration-timer nil)
  (add-hook 'after-init-hook
            (lambda ()
              (setq my-delayed-configuration-timer
                    (run-with-timer
                      0.1 0.1 ; 0.1 秒ごとに
                      (lambda ()
                        (if my-delayed-configurations ; まだやることがあれば
                            (eval (pop my-delayed-configurations)) ; 一個やる
                          (cancel-timer my-delayed-configuration-timer)))))))
  (defmacro with-delayed-execution (&rest body)
    (declare (indent 0))
    `(push ',(cons 'progn body) my-delayed-configurations))
#+end_src
* ミニバッファ補完
** vercico
#+begin_src emacs-lisp :tangle yes
(fido-vertical-mode +1)
#+end_src
** marginalia
#+begin_src emacs-lisp :tangle yes
  (leaf marginalia
      :ensure t
      :config
      (marginalia-mode))

#+end_src
** orderless
#+begin_src emacs-lisp :tangle yes
  (leaf orderless
    :ensure t
    :custom
    (orderless-matching-styles .
  			     '(orderless-prefixes
  			       ))
    (completion-styles . '(orderless basic))
    (completion-category-overrides . '((file
                                        (styles basic partial-completion))
  				       (command (styles orderless))))
    )
#+end_src
** consult
#+begin_src emacs-lisp :tangle yes
  (leaf consult
        :ensure t
        :bind
        ("C-x b" . consult-buffer)
     )
        #+end_src
** affe
#+begin_src emacs-lisp :tangle yes
  (leaf affe
    :ensure t
    :after consult
    :init
    (defun affe-find-home ()
      "Affeをホームルートから実行する"
      (interactive)
      (affe-find "~")
      )
    :bind
    ("M-g f" . affe-find)
    ("M-g h" . affe-find-home)
    ("M-g g" . affe-grep)
    :custom
    (affe-highlight-function . 'orderless-highlight-matches)
    (affe-find-command . "fd --color=never --full-path")
    )
#+end_src
* 入力補完
** coTrfu
#+begin_src emacs-lisp :tangle yes
  (leaf corfu
    :ensure t
    :custom(
            (corfu-auto . t)
            (corfu-auto-delay . 0)
           (corfu-popupinfo-delay . 0)
            (corfu-quit-no-match . 'separator)
            (corfu-auto-prefix . 1)
            (corfu-cycle . t)
            (text-mode-ispell-word-completion . nil)
            (tab-awlays-indent . 'complete)
            )
    :init
    (global-corfu-mode)
   :config
    (corfu-popupinfo-mode)
    (keymap-unset corfu-map "RET")
    (keymap-unset corfu-map "<up>")
    (keymap-unset corfu-map "<remap> <next-line>")
    (keymap-unset corfu-map "<remap> <previous-line>")
    (keymap-unset corfu-map "<down>")
    (keymap-set corfu-map "C-n" 'corfu-next)
    (keymap-set corfu-map "C-p" 'corfu-previous)
    )
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)
#+end_src
** company
#+begin_src emacs-lisp :tangle yes
 ; (leaf company
 ;   :custom
 ;   (company-minimum-prefix-length . 1)
 ;   (company-idle-delay . 0)
 ;   :config
 ;   ;(global-company-mode)
 ;   :ensure t)
#+end_src
** cape
#+begin_src emacs-lisp :tangle yes
  ;(leaf cape
   ; :ensure t
   ; :init
   ; (add-to-list 'completion-at-point-functions #'cape-file); ディレクトリやファイルなどを補完
   ; (add-to-list 'completion-at-point-functions #'cape-keyword); falseみたいなキーワードをmodeごとに補完
   ; )

#+end_src
* キーバインディング
#+begin_src emacs-lisp :tangle yes
  (leaf keymap
    :bind
    ("C-q" . scroll-down-command) ;元々M-vだったが、入力しにくいので、そっちをvterm-toggleにした
    )
#+end_src
* ellama
#+begin_src emacs-lisp :tangle yes
  (leaf ellama
    :ensure t
    :bind ("C-c e" . ellama-transient-main-menu)
    :init
    (require 'llm-ollama)
    (setopt ellama-provider (make-llm-ollama
                 		   :scheme "http"
                             :host "ollama.mdip2home.com"
                 		   :port 80
                             :chat-model "Qwen2.5:14b"
                             :embedding-model "Qwen2.5:14b"
       			   :default-chat-non-standard-params '(("num_ctx" . 32768))))
    :config
    (defcustom ellama-japanese-correction-prompt-template
      "文:\n%s\n
  あなたは論理的な思考を重視する編集者です。
          上記のメモを添削し、論理的なメモに適した形にしてください。
         "
      "Prompt template for `ellama-summarize'."
      :group 'ellama
      :type 'string)
    (defun ellama-japanese-correction ()
      "Summarize selected region or current buffer."
      (interactive)
      (let ((text (if (region-active-p)
                 	    (buffer-substring-no-properties (region-beginning) (region-end))
                 	  (buffer-substring-no-properties (point-min) (point-max)))))
        (ellama-instant (format ellama-japanese-correction-prompt-template
       			      text))))

    )
    #+end_src
* aidermacs
#+begin_src emacs-lisp :tangle yes
  ;(leaf aidermacs
  ;  :ensure t
  ;  :bind
  ;  ("C-c i" . aidermacs-transient-menu)
  ;  :custom
  ;  (aidermacs-backend . 'vterm)
  ;  (aidermacs-default-model . "ollama/Qwen2.5:14b") 
  ;  :config
  ;  (setenv "OLLAMA_API_BASE" "http://ollama.mdip2home.com")
  ;  )
#+end_src
* lsp-bridge
#+begin_src emacs-lisp :tangle yes
  ;(require 'yasnippet)
  ;(yas-global-mode 1)
  ;(require 'lsp-bridge)
  ;(global-lsp-bridge-mode)
  ;(setq lsp-bridge-nix-lsp-server "nil")
  ;(setq lsp-bridge-enable-with-tramp t)
  ;(setq lsp-bridge-remote-start-automatically t)
  ;(setq lsp-bridge-enable-search-words nil)
  ;(setq lsp-bridge-auto-format-code t)
  ;(setq lsp-bridge-auto-format-code-idle 10)
  ;(setq lsp-bridge-enable-org-babel t)
  ;(setq lsp-bridge-enable-hover-diagnostic t)
  ;(setq acm-enable-tabnine nil)
  ;(setq acm-enable-search-file-words nil)
  ;(setq acm-enable-ctag nil)
  ;(setq acm-enable-telega nil)
  ;(setq lsp-bridge-log-level "debug")
#+end_src
* lsp-mode
#+begin_src emacs-lisp :tabgle yes
  (leaf lsp-mode
  :ensure t
  :custom
  (lsp-keymap-prefix . "M-p")
  (lsp-log-in . nil) ;パフォーマンスに大きく影響するらしい
  :hook
  (lsp-mode-hook . lsp-enable-which-key-integration)
  ;補完をorderlessで絞れるようにする
  (lsp-completion-mode-hook . (lambda ()
    (setq-local completion-category-defaults
                (assoc-delete-all 'lsp-capf completion-category-defaults))))
  )
  (setq lsp-completion-provider :none)


  (defun lsp-booster--advice-json-parse (old-fn &rest args)
    "Try to parse bytecode instead of json."
    (or
     (when (equal (following-char) ?#)
       (let ((bytecode (read (current-buffer))))
         (when (byte-code-function-p bytecode)
           (funcall bytecode))))
     (apply old-fn args)))
  (advice-add (if (progn (require 'json)
                         (fboundp 'json-parse-buffer))
                  'json-parse-buffer
                'json-read)
              :around
              #'lsp-booster--advice-json-parse)

  (defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
    "Prepend emacs-lsp-booster command to lsp CMD."
    (let ((orig-result (funcall old-fn cmd test?)))
      (if (and (not test?)                             ;; for check lsp-server-present?
               (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
               lsp-use-plists
               (not (functionp 'json-rpc-connection))  ;; native json-rpc
               (executable-find "emacs-lsp-booster"))
          (progn
            (when-let ((command-from-exec-path (executable-find (car orig-result))))  ;; resolve command from exec-path (in case not found in $PATH)
              (setcar orig-result command-from-exec-path))
            (message "Using emacs-lsp-booster for %s!" orig-result)
            (cons "emacs-lsp-booster" orig-result))
        orig-result)))
  (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)
#+end_src
* lsp-ui
#+begin_src emacs-lisp :tangle yes
  (leaf lsp-ui
    :ensure t
  )
#+end_src
* tmampのread-only問題への対処
#+begin_src emacs-lisp :tangle yes
  (add-hook 'find-file-hook
            (lambda ()
              (when (file-remote-p (buffer-file-name))
                (set (make-local-variable 'inhibit-read-only) t)
                (fset (make-local-variable 'file-writable-p) (lambda (filename) t))
                (set (make-local-variable 'buffer-read-only) nil))))
#+end_src
* 言語固有の設定
** nix
#+begin_src emacs-lisp :tangle yes
  (leaf nix-ts-mode
    :ensure t
    :mode
    (("\\.nix\\'" . nix-ts-mode))
    :hook
    (nix-ts-mode-hook . nixfmt-on-save-mode)
    (nix-ts-mode-hook . lsp)
    )
#+end_src
** yaml
#+begin_src emacs-lisp :tangle yes
  (leaf yaml-mode
    :ensure t
    )
  (add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-mode))
  (leaf yaml-ts-mode
    :mode
    ("\\.ya?ml\\'")
    )
  (add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-ts-mode))
  (add-to-list 'major-mode-remap-alist '(yaml-mode . yaml-ts-mode))
#+end_src
** rust
#+begin_src emacs-lisp :tangle yes
   (leaf rust-mode
      :ensure t
      :custom
      (rust-mode-treesitter-derive . t)
      (rust-format-on-save . t)
      :hook
      (rust-mode-hook . lsp)
      )
  ; (add-hook 'rust-mode-hook 'eglot-ensure)
   (defun my/find-rust-project-root (dir)                                                                           
      (when-let ((root (locate-dominating-file dir "Cargo.toml")))                                                         
        (list 'vc 'Git root)))

   (defun my/rust-mode-hook ()
     (setq-local project-find-functions (list #'my/find-rust-project-root)))

   (add-hook 'rust-mode-hook #'my/rust-mode-hook)
#+end_src
** Python
#+begin_src emacs-lisp :tangle yes
    ;(add-hook 'python-ts-mode-hook 'ruff-format-on-save-mode)
    ;(leaf ruff-format
    ;  :ensure t
    ;  )
  (leaf python-mode
    :ensure t
    )
  (use-package lsp-pyright
    :ensure t
    :custom (lsp-pyright-langserver-command "pyright") ;; or basedpyright
    :hook (python-ts-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp))))  ; or lsp-deferred
#+end_src
** typst
#+begin_src emacs-lisp :tangle yes
  (setq typst-ts-mode-watch-option "--open")

  ;typst-previewだと保存しなくても同期するようになる
  (setq typst-preview-browser "qutebrowser")
#+end_src
* org
** org
#+begin_src emacs-lisp :tangle yes
  (leaf org
    :ensure t
    :custom
    (org-todo-keywords
     . '((sequence  "TODO(t)" "WAIT(w)" "SOMEDAY(s)" "PROJECT(p)" "|" "DONE(d)" "CANCEL(c)")
         )
     )
    (org-startup-truncated . nil)
    (org-hide-emphasis-markers . t);boldなどの*を隠す
    (org-emphasis-regexp-components . '("[:alnum:][:nonascii:][:punct:]" "[:alnum:][:nonascii:][:punct:]" "[:space:]" "." 1));*の前後にspaceが要らないように


    (org-todo-keyword-faces
     . '(("TODO" . (:foreground "white" :background "red" :weight bold))
         ("WAIT" . org-warning)
         ("SOMEDAY" . (:foreground "white" :background "pink" :weight bold))
         ("DONE(d)" . "yellow")
         ("CANCEL" . org-warning)
         ("PROJECT" . (:foreground "white" :background "purple" :weight bold))
         ))
    (org-startup-folded . t)
    (org-tag-alist
     . '(("HOME" . ?h)
         ("LAB" . ?l)
         ("PC" . ?p)
         ("desk" . ?d)
         ("smartphone" . ?s)
         ("anywhere" . ?a)
         ("movie" . ?m)
         ("Kana" . ?k)
         ))
    (org-directory . "~/dropbox")
    (org-return-follows-link . t)
    :config
    )
    (regexp-opt '("Tasks" "Notes"))
#+end_src
** org-clock
#+begin_src emacs-lisp :tangle yes
  (setq org-clock-clocktable-default-properties
        '(:maxlevel 10
                    :lang "ja"
                    :scope agenda-with-archives
                    :block today
                    :level 4))
  (keymap-global-set "C-c C-x C-j" 'org-clock-goto)
  (keymap-global-set "C-c C-x C-o" 'org-clock-out)
#+end_src
** org-agenda
#+begin_src emacs-lisp :tangle yes
  (leaf org-agenda
    :bind
    (
     (org-agenda-mode-map
      ("t" . org-agenda-previous-item)
      ("s" . org-agenda-next-item)
      ("e" . org-agenda-todo)
      ;以下の関数は割り当てていない
      ;org-agenda-set-effort
  					;org-save-all-org-buffers
      )
     )
    :custom
    (org-agenda-start-on-weekday . nil); agendaの日々の始まりを今日に
    (org-agenda-start-day . "today")
    (org-agenda-skip-scheduled-if-done . '("DONE" "CANCEL"));スケジュールでDONEとCANCELを無視するようにする
    )
#+end_src
** org-super-agenda
#+begin_src emacs-lisp :tangle yes
  (leaf org-super-agenda
    :ensure t
    :bind
    ("C-c a" . #'org-agenda)
    :custom
    (org-agenda-files . '("~/dropbox/inbox/inbox.org" "~/dropbox/habit.org" "~/dropbox/kana.org"))
    (org-agenda-todo-ignore-scheduled . t)
    (org-agenda-custom-commands
     . '(
         (
          "w" "review"
          (
           (agenda "週の振り返り"
                   (
                    (org-agenda-span 'week)
                    (org-agenda-overriding-header "来週の予定")
                     )
                   )
           (todo "TODO"
                 ((org-agenda-prefix-format " ")
                  (org-super-agenda-groups
                   '(
                     (:name "やること" :todo "TODO")
                   (:discard (:anything t))
                 ))
           ))
           )
          )
         ("g" "Garbage Tasks List"
         ((alltodo ""
                ((org-super-agenda-groups
                  '((:name "Completed Tasks"
                     :todo ("DONE" "CANCEL")
                     :or (:scheduled t :deadline t))))))))
         (
          "d" "TODO"
          (
           (todo "TODO"
                 ((org-agenda-prefix-format " ")
                  (org-super-agenda-groups
                   '(
                     (:name "やること" :todo "TODO")
                   (:discard (:anything t))
                 ))
           ))
           )
          )
         ("h" "Home"
          (
           (agenda "今日のこと"
                   ((org-agenda-span 'day))
                   )
           (todo "TODO"
                 ((org-agenda-prefix-format " ")
                  (org-super-agenda-groups
                   '(．
                     (:name "TODO" :tag ("PC" "smartphone" "desk" "HOME" "home" "anywhere"))
                     (:discard (:anything t))
                     ))
                  ))
           )

          )
                ("w" "review"
          (
           (agenda "週の振り返り"
                   ((org-agenda-span 'week)
                    (org-agenda-overriding-header "来週の予定")
                    )
                   )
           (todo "TODO"
                 ((org-agenda-prefix-format " ")
                  (org-super-agenda-groups
                   '(．
                     (:name "TODO" :todo "TODO")
                     (:discard (:anything t))
                     ))
                  ))
           )

          )

         ("l" "lab"
          (
           (agenda "今日のこと"
                   ((org-agenda-span 'day))
                   )
           (todo "TODO"
                 ((org-agenda-prefix-format " ")
                  (org-super-agenda-groups
                   '(
                     (:name "TODO" :tag ("PC" "smartphone" "desk" "lab" "LAB" "anywhere"))
                     (:discard (:anything t))
                     ))
                  ))
           )

          )
         )
     )

    :config
    (org-super-agenda-mode)
    )
#+end_src
** org-archive
#+begin_src emacs-lisp :tangle yes
  (defun my/org-archive-to-trash ()
    "Move the current subtree to ~/dropbox/trash.org instead of the default archive location"
    (interactive)
    (let ((org-archive-location "~/dropbox/trash.org::"))
      (org-agenda-archive)))
  (define-key org-agenda-mode-map (kbd "#") 'my/org-archive-to-trash)
#+end_src
** org-capture
#+begin_src emacs-lisp :tangle yes
  (leaf org-capture
    :bind
    ("C-c c" . org-capture)
    :config
      (let* ((current-time (current-time))
             ;; 現在の日付から土曜日までの日数を計算
             (days-to-saturday (mod (- 6 (string-to-number (format-time-string "%w" current-time))) 7))
             ;; 今週の土曜日を計算
             (start-of-week (time-add
                             (time-add current-time (days-to-time days-to-saturday)) (days-to-time -6)))
             ;; 翌週の金曜日を計算
             (end-of-week (time-add start-of-week (days-to-time 6)))
             ;; フォーマットされた日付
             (start-day (format-time-string "%m%d" start-of-week))
             (end-day (format-time-string "%m%d" end-of-week))
             ;; 年を取得
             (year (format-time-string "%Y" start-of-week))
             ;; アーカイブディレクトリとファイル名
             (archive-dir (expand-file-name (format "~/dropbox/archive/%s/" year)))
             (archive-file (format "%s%s-%s.org" archive-dir start-day end-day)))

        (setq weekly-dir   archive-file)
        (setq org-archive-location (format "%s::** やったこと" archive-file))
  )
      :custom

    (taskfile . "~/dropbox/inbox/inbox.org")
    (org-capture-templates
     . '(
         ("t" "ToDo" entry (file taskfile )
          "* TODO %^{title}\n %?")
         ("h" "Habit" entry (file "~/dropbox/habit.org")
  	  "* TODO %^{title}\n:PROPERTIES:\n:STYLE: habit\n:END:\n%?")
         ("p" "Project" entry (file+headline taskfile "プロジェクト" )
          "* PROJECT %^{title}[/]\n:PROPERTIES:\n:CATEGORY: %\\1\n:END:\n%?")
         ("w" "Weekly Report" entry (file weekly-dir)
           "* 今週のこと
  ,** やったこと
  ,** 時間計測
  ,#+BEGIN: clocktable :scope agenda-with-archives :maxlevel 10 :lang \"ja\" :block lastweek :wstart 6 :level 4
  ,#+END:
  ,** 考えたこと
  %?
  ,* 来週のこと
  ,** 予定
  %(my/org-agenda-to-string \"a\")
  ,** TODOリスト
  %(my/org-agenda-to-string \"d\")
  ,** 考えていること
  ")))
    )

    (defun my/org-agenda-to-string (agenda-type)
      "Generate agenda string for the current week using a temporary file."
      (let ((temp-agenda-file (make-temp-file "org-agenda-"))
            (org-agenda-buffer nil)) ; 読み取り専用バッファを使わないようにする
        (save-window-excursion
          (org-agenda nil agenda-type) ; Agenda ビューを生成
          (org-agenda-write temp-agenda-file)) ; 一時ファイルに書き出し
        (with-temp-buffer
          (insert-file-contents temp-agenda-file) ; 一時ファイルの内容を読み込む
          (goto-char (point-min))
          ;; 不要な部分を整形 (例: ヘッダー削除)
          (kill-whole-line)
          (buffer-string)))) ; 最終的な文字列として返す
#+end_src
** org-refile
#+begin_src emacs-lisp :tangle yes
  (defun my-org-refile-verify-target ()
    "プロジェクト見出しの下にある全ての見出しを検証します。"
    (let ((path (org-get-outline-path)))
      (or (string= (car path) "プロジェクト")
          (member "プロジェクト" path))))

  (setq org-refile-target-verify-function 'my-org-refile-verify-target)
  (setq org-refile-targets '((nil . (:maxlevel . 9))))
#+end_src
** org-journal
#+begin_src emacs-lisp :tangle yes
  ;
#+end_src
** org-indent
#+begin_src emacs-lisp :tangle yes
  (leaf org-indent
    :hook org-mode-hook(org-indent-mode)
    )
#+end_src
** org-modern
#+begin_src emacs-lisp :tangle yes
  (leaf org-modern
    :ensure t
    :custom
   ( 
     (org-insert-heading-respect-content . t)
     (org-modern-star . "◉○●◈◇◆✸✳")
     (org-modern-todo-faces
      .  (quote (("SOMEDAY" :background "pink" :foreground "white" :weight bold)
                 ("PROJECT" :background "purple" :foreground "white" :weight bold)
                 ))

      )
     )
    :config
    (with-eval-after-load ' org ( global-org-modern-mode))
    )

#+end_src

** org-modern-indent
#+begin_src emacs-lisp :tangle yes
  (add-hook 'org-mode-hook #'org-modern-indent-mode 90)
#+end_src
** org-habit
#+begin_src emacs-lisp :tangle yes
  (leaf org-habit
    :custom
    (org-habit-show-habits-only-for-today . t)
    :config
    (add-to-list 'org-modules 'org-habit t)
    )
#+end_src
** gcal
#+begin_src emacs-lisp :tangle yes
  (with-delayed-execution
    (eval-after-load 'gcal
      '(eval-after-load 'gcal-org
         '(progn
         (setq gcal-client-id  "1005172243429-37v4n4shbp9dinr7h7ki5elu98nko9h4.apps.googleusercontent.com")
         (setq gcal-client-secret  "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")
         (gcal-org-pull-to-file
      	"shizhaoyoujie@gmail.com"
      	"~/dropbox/inbox/inbox.org"
      	"FROM_GCAL"
      	"~/dropbox/my-schedule.gcal-cache")
         (gcal-org-push-file
      	"shizhaoyoujie@gmail.com"
      	"~/dropbox/inbox/inbox.org"
      	"~/dropbox/my-schedule.gcal-cache")

         ; かなとの予定
         (gcal-org-pull-to-file "3512a1f6cb8f64e6d897c8e882de5910cef1a834fe96c1634963a76bd50e72dc@group.calendar.google.com"
      			      "~/dropbox/kana.org"
      			      "FROM_KANA"
      			      "~/dropbox/kana-schedule.gcal-cache")
         (gcal-org-push-file
    	"3512a1f6cb8f64e6d897c8e882de5910cef1a834fe96c1634963a76bd50e72dc@group.calendar.google.com"
    	"~/dropbox/kana.org"
    	"~/dropbox/kana-schedule.gcal-cache")

         )
         )
      )
    )
#+end_src
** org-babel
#+begin_src emacs-lisp :tangle yes
  (org-babel-do-load-languages 'org-babel-load-languages
  			     '((emacs-lisp . t)
  			       (org . t)))
#+end_src
** org-roam
#+begin_src emacs-lisp :tangle yes
  (leaf org-roam
    :ensure t
    :bind
    ("C-c n l" . org-roam-buffer-toggle)
    ("C-c n f" . org-roam-node-find)
    ("C-c n i" . org-roam-node-insert)
    :custom
    (org-roam-directory . "~/dropbox/zk")
    (find-file-visit-truename .  t)
    (org-roam-capture-templates
     . '(("d" "default" plain "%?" :if-new
          (file+head "${slug}-%<%d-%m-%y>.org" "#+title: ${title}")
          :unnarrowed t
          :jump-to-captured t)

           ("p" "paper" plain "%?" :if-new
            (file+head "${slug}-%<%d-%m-%y>.org" "#+title: ${title}
  ,#+filetags: :reference:paper:
  ,#+bibliography: ~/dropbox/ref.bib")
          :unnarrowed t
          :jump-to-captured t)
           ("b" "book" plain "%?" :if-new
            (file+head "${slug}-%<%d-%m-%y>.org" "#+title: ${title}
  ,#+filetags: :reference:book:
  ,#+bibliography: ~/dropbox/ref.bib")
          :unnarrowed t
          :jump-to-captured t)
           ("a" "anime" plain "%?" :if-new
            (file+head "${slug}-%<%d-%m-%y>.org" "#+title: ${title}
  ,#+filetags: :reference:anime:
  ,#+bibliography: ~/dropbox/ref.bib")
          :unnarrowed t
          :jump-to-captured t)
           ("m" "movie" plain "%?" :if-new
            (file+head "${slug}-%<%d-%m-%y>.org" "#+title: ${title}
  ,#+filetags: :reference:movie:
  ,#+bibliography: ~/dropbox/ref.bib")
          :unnarrowed t
          :jump-to-captured t)
         )
     )
    :config
    (setq org-roam-node-display-template
  	(concat "${title:*} "
  		(propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    )
#+end_src
** org-roam-ui
#+begin_src emacs-lisp :tangle yes
  (leaf org-roam-ui
    :ensure t
    :custom
    (org-roam-ui-sync-theme . t)
    (org-roam-ui-follow  . t)
    (org-roam-ui-update-on-save . t)
    (org-roam-ui-open-on-start . t)
    :bind
    ("C-c n u" . org-roam-ui-open)
  )
#+end_src
** org-roam-review
#+begin_src emacs-lisp :tangle yes
  (leaf org-roam-review
    :commands (org-roam-review
               org-roam-review-list-by-maturity
               org-roam-review-list-recently-added)
    :hook (org-roam-capture-new-node-hook . org-roam-review-set-seedling)
    :bind (:org-mode-map
           ("C-c r r" . org-roam-review-accept )
           ("C-c r f" . org-roam-review-forgot)
           ("C-c r u" . org-roam-review-bury)
           ("C-c r m" . org-roam-review-set-memorise)
           ("C-c r x" . org-roam-review-set-excluded)
           ("C-c r b" . org-roam-review-set-budding)
           ("C-c r s" . org-roam-review-set-seedling)
           ("C-c r e" . org-roam-review-set-evergreen)
           )
    (  	 ("C-c n r" . org-roam-review)
)
    )
#+end_src
** citer
#+begin_src emacs-lisp :tangle yes
  (leaf citar
    :ensure t
    :custom
    (citar-bibliography . '("~/dropbox/ref.bib"))
    :config
    (define-key minibuffer-local-map (kbd "s-j") 'icomplete-fido-exit)
    )
#+end_src
* Git
** diff-hl
#+begin_src emacs-lisp :tangle yes
  (leaf diff-hl
    :ensure t
    :custom
    (global-diff-hl-mode . t)
    (diff-hl-flydiff-mode . t)
    (diff-hl-draw-borders . nil)
    )
#+end_src
** magit
#+begin_src emacs-lisp :tangle yes
  (leaf magit
    :ensure t
    :bind
    ("C-x g" . magit-status)
    )
#+end_src
* flycheck
#+begin_src emacs-lisp :tangle yes
  (leaf flycheck
    :ensure t
    :config
    (flycheck-define-checker textlint
    "textlint."
    :command ("textlint" "--format" "unix"
              source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
              (id (one-or-more (not (any " "))))
              (message (one-or-more not-newline)
                       (zero-or-more "\n" (any " ") (one-or-more not-newline)))
              line-end))
    :modes (text-mode markdown-mode gfm-mode LaTeX-mode japanese-latex-mode))
  (add-to-list 'flycheck-checkers 'textlint)

    )
  (add-hook 'after-init-hook #'global-flycheck-mode)
  (leaf flycheck-posframe
      :ensure t
      :after flycheck posframe
      :config(flycheck-posframe-mode)
      )
#+end_src
* PDF
#+begin_src emacs-lisp :tangle yes
  (leaf pdf-tools

    :ensure t
    :init
   (pdf-tools-install)
    )
  (add-hook 'pdf-view-mode-hook (lambda() (nlinum-mode -1)))
  #+end_src
* MisTTY
#+begin_src emacs-lisp :tangle yes
  (with-delayed-execution
    (leaf mistty
      :ensure t
      :custom
  					;(explicit-shell-file-name . "/home/kaki/.nix-profile/bin/fish")
      (mistty-shell-command . "/bin/bash")
      )
    )
#+end_src
* helpful
#+begin_src emacs-lisp :tangle yes
  (leaf helpful
      :ensure t
      )
#+end_src
* Avy
#+begin_src emacs-lisp :tangle yes
  (leaf avy
    :ensure t
    :bind ("M-'" . avy-goto-char-timer)
    )
  (defun avy-action-helpful (pt)
    (save-excursion
      (goto-char pt)
      (helpful-at-point))
    (select-window
     (cdr (ring-ref avy-ring 0)))
    t)
  ;(setf (alist-get ?H avy-dispatch-alist) 'avy-action-helpful)
  (defun avy-action-embark (pt)
    (unwind-protect
        (save-excursion
  	(goto-char pt)
  	(embark-act))
    (select-window
     (cdr (ring-ref avy-ring 0))))
    t)
  ;(setf (alist-get ?. avy-dispatch-alist) 'avy-action-embark)
    
#+end_src
* ace-window
#+begin_src emacs-lisp :tangle yes
  (leaf ace-window
    :ensure t
    :bind
    ("C-x o" . ace-window)
  )

#+end_src
* embark
#+begin_src emacs-lisp :tangle yes
  (leaf embark
    :ensure t
  ;  :bind(
  ; 	("C-." . embark-act)
  ;	("C-;" . embark-dwim)
  ;	("C-h B" . embark-bindings))
    :custom
    (prefix-help-command #'embark-prefix-help-command)
    )
  (leaf embark-consult
    :ensure t
    :after consult 
    )
#+end_src
* go-translate
#+begin_src emacs-lisp :tangle yes
  (with-delayed-execution
    (leaf go-translate
      :ensure t
      :defer-config
      (setq gt-langs '(en ja))
      (setq gt-default-translator
  	  (gt-translator
  	   :taker (gt-taker :text 'buffer :pick 'paragraph)
  	   :engines (list (gt-deepl-engine :key "b432a243-b42a-420b-97a1-43e1e54ae3be:fx"))
  	   :render (gt-buffer-render :then (gt-kill-ring-render))
  	   ))
  					; :bind (
  					;	 ("C-t" . gt-do-translate)
  					;	 )
      )
    )
#+end_src
* reinbow-delimiters
#+begin_src emacs-lisp :tangle yes
  (leaf rainbow-delimiters
    :ensure t
    :hook emacs-lisp-mode-hook (rainbow-delimiters-mode)
    )
#+end_src
* reformatter
#+begin_src emacs-lisp :tangle yes
  (with-delayed-execution
    (leaf reformatter
        :ensure t
        )
      (reformatter-define nixfmt
        :program "nixfmt"
        :args '("-")
        )
    ;  (reformatter-define ruff
    ;    :program "ruff format"
    ;    :args '("-")
    ;    )
      )
#+end_src
* aggressive-inden
* プログラミング支援
** eglot
#+begin_src emacs-lisp :tangle yes
  (leaf eglot
    :defer-config
    (add-to-list 'eglot-server-programs
  ;	       '((nix-ts-mode . ("nil"))
  					;	       (typst-ts-mode . ("tinymist")))
  	       '(nix-ts-mode . ("nil"))
                 )
    (add-to-list 'eglot-server-programs
  	       '(typst-ts-mode . ("tinymist")))
    )
  (leaf eglot-booster
    :when (executable-find "emacs-lsp-booster")
    :vc ( :url "https://github.com/jdtsmith/eglot-booster")
    :global-minor-mode t)
#+end_src

** Tex
#+begin_src emacs-lisp :tangle yes
  (with-delayed-execution
    (leaf auctex
      :ensure t
      :custom
      (
     (TeX-default-mode . 'japanese-latex-mode)
     (TeX-auto-save . t)
     (TeX-parse-self . t)
     (TeX-master . nil)
     )

     ;(TeX-view-program-selection . '((output-pdf "PDF Tools")))
     (TeX-view-program-selection . '((output-pdf "Zathura")))
     (japanese-TeX-engine-default . 'platex)
     ;(TeX-view-program-list . '(("PDF Tools" TeX-pdf-tools-sync-view)))
     ;; 保存時に自動コンパイル
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)

  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (add-hook 'after-save-hook 'TeX-command-run-all nil t)))

     ;(TeX-PDF-from-DVI . "Dvipdfmx")
      )
    )
  ;  (add-hook 'LaTeX-mode-hook 'japanese-LaTeX-mode)
   ; (leaf auctex-latexmk
    ;   :ensure t
     ;  :after auctex
      ; :config
       ;(auctex-latexmk-setup)
    ;)
#+end_src

** envrc
#+begin_src emacs-lisp :tangle yes
  (leaf envrc
    :ensure t
    :custom
    (envrc-remote . t)
    :config
    (envrc-global-mode)
    )
#+end_src
** tramp
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load "tramp"
    (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
    )
#+end_src
* Dired
** dired-narrow
#+begin_src emacs-lisp :tangle yes
  (with-delayed-execution
  (leaf dired-narrow
    :ensure t
    :after dired-hacks-utils
    :bind
    (dired-mode-map
     ("," . dired-narrow-fuzzy)
     )
    )
  )
#+end_src
* mu4e
#+begin_src emacs-lisp :tangle yes
  (with-delayed-execution
    (setq mail-user-agent 'mu4e-user-agent)
    )
#+end_src
* vterm
#+begin_src emacs-lisp :tangle yes
  (leaf vterm
    :ensure t
    :custom
    (vterm-keymap-exceptions
     . '("C-c" "C-y" "M-v" "M-x"))
    (vterm-tramp-shells . '(("ssh" "'fish'") ("scp" login-shell) ("docker" "/bin/sh")))
    :bind
    ("M-v" . vterm-toggle)
    (vterm-mode-map
     ("C-c C-c" . 'vterm--self-insert)
     )
    )
#+end_src
** vterm-toggle
#+begin_src emacs-lisp :tangle yes
  (leaf vterm-toggle
    :ensure t
    :custom
    (vterm-toggle-scope . 'project)
    )
#+end_src
* Slack
#+begin_src emacs-lisp :tangle yes
  ;(with-eval-after-load 'slack
  ;  (slack-register-team
  ;   :name "mdip"
  ;   :token "xoxc-14011030212-3874022267665-7457834306050-c11c89ae65f84a20d838527b17e004f9164a04139ba7f3f765040503139c761a"
   ;  :cookie "xoxd-KyIEnNOMYcpJsp0vMhsPnp4mLiqyNrgpzJ0TXux0CjTqxXnTXikUyQzDd5qhS3sTg7ff1W%2FFSayOP0RmmuAIgjcvXbOzZzkUcbhNeBLyQjtsuqw2tNiOnGeQbxXIJTA2YwmJGHdD8IdCTrIN6JLIdxQGvFpjnfKLWCv0eN5uq1DOSOqrpcMd6g%3D%3D; d-s=1721647725"
   ;  :default t
   ;  )
   ; )
#+end_src
** slack-org
org-store-linkでリンクをコピーすることができる。
TODOに貼っておくことで、作業の際に確認することができるようになる。
#+begin_src emacs-lisp :tangle yes
#+end_src
* 履歴保存
bufferが溜ったり、設定が更新されなかったり、ssh先が保存されなかったり、いまいちなことが多いので一旦無効化する。
#+begin_src emacs-lisp :tangle yes
 ; (leaf desktop
  ;  :custom
  ;  (desktop-save-mode . 1)
  ;  )
#+end_src
