#+TITLE: Configurations for GNU Emacs
#+AUTHOR: minera
* Header
#+begin_src emacs-lisp :tangle yes
  ;; init.el --- My init.el -*- lexical-binding: t -*-
  ;; Configurations for Emacs
#+end_src
* leaf.el
#+begin_src emacs-lisp :tangle yes
  ;;<leaf-install-code>
  (eval-and-compile
  (customize-set-variable
       'package-archives
  '(("melpa" . "https://melpa.org/packages/")
  ("gnu" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless (package-installed-p 'leaf)
  (package-refresh-contents)
  (package-install 'leaf))
  (leaf leaf-keywords
    	:ensure t 
    	:init
  	(leaf el-get :ensure t)
  	
    	:config 
    	(leaf-keywords-init)))

  (leaf leaf-tree :ensure t)

  (leaf leaf-convert :ensure t)

#+end_src		            
* builtin properties
#+begin_src emacs-lisp :tangle yes
(leaf cus-start
  :tag "builtin" "internal"
  :custom ((user-full-name . "Yusuke Kakinuma")
(default-directory . "~/")))

#+end_src
* theme
** Modus Theme
  #+begin_src emacs-lisp :tangle yes
    (leaf modus-themes
      :ensure t
      :custom(
    	  (modus-themes-italic-constructs . t)
    	  (modus-themes-bold-constructs . t)
    	  (modus-themes-mode-line . '(moody borderless))
    	  (modus-themes-prompts .
    				'(italic bold))
    	  (custom-safe-themes . t)
    	  )
      ;; antehutaonsuh
      :config
       ;(modus-themes-load-theme)
      (load-theme 'modus-operandi)
      )
#+end_src
* tree-sitter
#+begin_src emacs-lisp :tangle yes
  (leaf treesit
    :custom(
  	  (treesit-font-lock-level . 4)
  	  (major-mode-remap-alist .
  				  '(
  				   (nix-mode . nix-ts-mode)
  				    ;  (emacs-lisp-mode . emacs-lisp-ts-mode)
  				      (yaml-mode . yaml-ts-mode)
  				      )
  )				  
  )				       
        )
  (leaf tree-sitter
    :ensure t
    :config
    (global-tree-sitter-mode)
  )

  #+end_src
** nix
#+begin_src emacs-lisp :tangle yes
  (leaf nix-mode
    :ensure t
    :mode
    (("\\.nix\\'"))
    )
  (add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))
  (leaf nix-ts-mode
   :ensure t
    :mode
    (("\\.nix\\'" . nix-ts-mode))
     )
  (add-hook 'nix-ts-mode-hook 'eglot-ensure)
#+end_src
** yaml
#+begin_src emacs-lisp :tangle yes
  (leaf yaml-mode
    :ensure t
    )
  (add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-mode))
  (leaf yaml-ts-mode
    :mode
    ("\\.ya?ml\\'")
    )
  (add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-ts-mode))
  (add-to-list 'major-mode-remap-alist '(yaml-mode . yaml-ts-mode))
#+end_src
** rust
#+begin_src emacs-lisp :tangle yes
  (leaf rust-mode
     :ensure t
     :custom
     (rust-mode-treesitter-derive . t))
  (add-hook 'rust-mode 'elgot-ensure)
  (defun my/find-rust-project-root (dir)                                                                           
     (when-let ((root (locate-dominating-file dir "Cargo.toml")))                                                         
       (list 'vc 'Git root)))

  (defun my/rust-mode-hook ()
    (setq-local project-find-functions (list #'my/find-rust-project-root)))

  (add-hook 'rust-mode-hook #'my/rust-mode-hook)
#+end_src
* Org-babel
#+begin_src emacs-lisp :tangle yes
(org-babel-do-load-languages 'org-babel-load-languages
'((emacs-lisp . t)
(org . t)))
#+end_src

* evil-mode
#+begin_src emacs-lisp :tangle yes
;(leaf evil
 ; :ensure t
  ;:config
  ;(evil-mode 1))

#+end_src
* ddskk
#+begin_src emacs-lisp :tangle yes
  (leaf ddskk
      :ensure t
      :bind
      ("C-x C-j" . skk-mode)
      :custom
      (skk-use-act . t)
      )

  (leaf ddskk-posframe
    :ensure t
    :after posframe ddskk
    :custom
    (ddskk-posframe-mode . t)
    )
#+end_src
* meow
#+begin_src emacs-lisp :tangle yes
  (leaf meow
  :ensure
  t
  :custom
    (meow-use-clipboard . t)
    (meow-expand-hint-counts . nil)
  					;(meow-cheatsheet-layout . meow-cheatsheet-layout-dvp)
    :require meow
    :config
    

  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-dvp)
    (meow-leader-define-key
  '("?" . meow-cheatsheet))
  (meow-motion-overwrite-define-key
     ;; custom keybinding for motion state
  '("<escape>" . ignore))
  (meow-normal-define-key
  '("?" . meow-cheatsheet)
  '("*" . meow-expand-0)
  '("=" . meow-expand-9)
  '("!" . meow-expand-8)
  '("[" . meow-expand-7)
  '("]" . meow-expand-6)
  '("{" . meow-expand-5)
  '("+" . meow-expand-4)
  '("}" . meow-expand-3)
  '(")" . meow-expand-2)
  '("(" . meow-expand-1)
  '("1" . digit-argument)
  '("2" . digit-argument)
  '("3" . digit-argument)
  '("4" . digit-argument)
  '("5" . digit-argument)
  '("6" . digit-argument)
  '("7" . digit-argument)
  '("8" . digit-argument)
  '("9" . digit-argument)
  '("0" . digit-argument)
  '("-" . negative-argument)
  '(";" . meow-reverse)
  '("," . meow-inner-of-thing)
  '("." . meow-bounds-of-thing)
  '("<" . meow-beginning-of-thing)
  '(">" . meow-end-of-thing)
  '("a" . meow-append)
  '("A" . meow-open-below)
  '("b" . meow-back-word)
  '("B" . meow-back-symbol)
  '("c" . meow-change)
  '("p" . meow-delete)
  '("P" . meow-backward-delete)
  '("e" . meow-line)
  '("E" . meow-goto-line)
  '("f" . meow-find)
  '("g" . meow-cancel-selection)
  '("G" . meow-grab)
  '("d" . meow-left)
  '("D" . meow-left-expand)
  '("i" . meow-insert)
  '("I" . meow-open-above)
  '("j" . meow-join)
  '("k" . meow-kill)
  '("l" . meow-till)
  '("m" . meow-mark-word)
  '("M" . meow-mark-symbol)
  '("h" . meow-next)
  '("H" . meow-next-expand)
  '("o" . meow-block)
  '("O" . meow-to-block)
  '("t" . meow-prev)
  '("T" . meow-prev-expand)
  '("q" . meow-quit)
  '("r" . meow-replace)
  '("R" . meow-swap-grab)
  '("s" . meow-search)
  '("n" . meow-right)
  '("N" . Meow-Right-expand)
  '("u" . meow-undo)
  '("U" . meow-undo-in-selection)
  '("v" . meow-visit)
  '("w" . meow-next-word)
  '("W" . meow-next-symbol)
  '("x" . meow-save)
  '("X" . meow-sync-grab)
  '("y" . meow-yank)
  '("z" . meow-pop-selection)
  '("'" . repeat)
  '("<escape>" . ignore)
  )
  )
    (meow-setup)
    (meow-global-mode)
    )
#+end_src

* which key
#+begin_src emacs-lisp :tangle yes
(leaf which-key
    :config
    (which-key-mode)
    )

#+end_src
* vercico
#+begin_src emacs-lisp :tangle yes
(fido-vertical-mode +1)
#+end_src
* marginalia
#+begin_src emacs-lisp :tangle yes
  (leaf marginalia
      :ensure t
      :config
      (marginalia-mode))
  
#+end_src
* orderless
#+begin_src emacs-lisp :tangle yes
  (leaf orderless
    :ensure t
    :custom(
  	  (completion-styles . '(orderless basic))
  	  (completion-category-overrides . '((file
					     (styles basic partial-completion)))))
    )
#+end_src
* consult
    #+begin_src emacs-lisp :tangle yes
      (leaf consult
            :ensure t
            :bind
            ("M-g f" . consult-fd))

#+end_src
* corfu
#+begin_src emacs-lisp :tangle yes
  (leaf corfu
    :ensure t
    :custom(
  (corfu-auto . t)
  (corfu-auto-delay . 0)
  (corfu-popupinfo-delay . 0)
  (corfu-quit-no-match . 'separator)
  (corfu-auto-prefix . 1)
  (corfu-cycle . t)
  (text-mode-ispell-word-completion . nil)
  (tab-awlays-indent . 'complete)
  )
    :init
    (global-corfu-mode)
    :config
    (corfu-popupinfo-mode)
    )

#+end_src
* icon
** nerd-icons
#+begin_src emacs-lisp :tangle yes
  (leaf nerd-icons
    :ensure t
    )
   (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)
  (leaf nerd-icons-corfu
    :ensure t
    :after nerd-icons
    :config
    )
#+end_src
* cape
#+begin_src emacs-lisp :tangle yes
  (leaf cape
    :ensure t
    )

#+END_src
* tab bar
 #+begin_src emacs-lisp :tangle yes
   ;(tab-bar-mode)
   (leaf centaur-tabs
     :ensure t
     :custom(
   	  (centaur-tabs-set-icons . t)
   	  (centaur-tabs-icon-type . 'nerd-icons)
   	  (centaur-tabs-set-bar . 'under)
   	  (x-underline-at-descent-line . t)
   	  (centaur-tabs-mode . t)
     )
    )
    
 #+end_src
* org
** org-indent
#+begin_src emacs-lisp :tangle yes
  (leaf org-indent
    :hook org-mode-hook(org-indent-mode)
    )
#+end_src
** org-modern
#+begin_src emacs-lisp :tangle yes
  (leaf org-modern
    :ensure t
    :custom
    (
    (org-insert-heading-respect-content . t)
    (org-modern-star . "◉○●◈◇◆✸✳")
    )
    :config
    (global-org-modern-mode)
    )

#+end_src

** org-nodern-indent
#+begin_src emacs-lisp :tangle yes
  (leaf org-modern-indent
      :el-get jdtsmith/org-modern-indent
      :require t
      :config (add-hook 'org-mode-hook #'org-modern-indent-mode 90)
      )
#+end_src

* eglot
#+begin_src emacs-lisp :tangle yes
  (leaf eglot
  ((add-to-list 'eglot-server-programs
  	      '((nix-ts-mode  . "nil")
  		(rust-mode) . "rust-anlyzer")
  	      )
   )
  )

#+end_src

* flycheck
#+begin_src  emacs-lisp :tangle yes
  (leaf flycheck
      :ensure t)
  (leaf flycheck-posframe
      :ensure t
      :after flycheck posframe
      :config(flycheck-posframe-mode)
      )
#+end_src
* Tex
#+begin_src emacs-lisp :tangle yes
  (leaf auctex
    :emacs>= 27.1
    :ensure t
    :custom
    (
   (TeX-default-mode . 'japanese-latex-mode)
   (TeX-view-program-selection '((output-pdf "Zathura")))
   )
    )
#+end_src

* PDF
#+begin_src emacs-lisp :tangle yes
  ;(leaf pdf-tools
  ;
  ;  ensure t
  ;  :init
   ; (pdf-tools-install)
  ;  )
  ;(add-hook 'pdf-view-mode-hook (lambda() (nlinum-mode -1)))
#+end_src
* Moody
#+begin_src emacs-lisp :tangle yes
  (leaf moody
    :ensure t
    :custom
    (x-underline-at-descent-line . t)
    (moody-mode-line-height . 26)
    :config
     (moody-replace-mode-line-front-space)
     (moody-replace-mode-line-buffer-identification)
     (moody-replace-vc-mode)
    )
#+end_src
* perfect-mergin
#+begin_src emacs-lisp :tangle yes
  (leaf perfect-margin
    :ensure t
    :custom
    (perfect-margin-ignore-filters . nil)
    :config
    ;(perfect-margin-mode)
    )
#+end_src
* MisTTY
#+begin_src emacs-lisp :tangle yes
  (leaf mistty
     :ensure t)
#+end_src
* Git
** diff-hl
#+begin_src emacs-lisp :tangle yes
  (leaf diff-hl
    :ensure t
    :custom
     (global-diff-hl-mode . t)
     (diff-hl-flydiff-mode . t)
     )
#+end_src
** magit
#+begin_src emacs-lisp :tangle yes
  (leaf magit
    :ensure t
    :bind
    ("C-x g" . magit-status)
    )
#+end_src
